{
	"name": "Debug Events",
	"events": [
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-key-pressed",
					"objectClass": "Keyboard",
					"sid": 547975309234566,
					"parameters": {
						"key": 88
					}
				}
			],
			"actions": [],
			"sid": 523495119938475,
			"children": [
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "pick-by-unique-id",
							"objectClass": "Planet",
							"sid": 206215826850146,
							"parameters": {
								"unique-id": "GameController.selectedPlanetUid"
							}
						}
					],
					"actions": [
						{
							"id": "signal",
							"objectClass": "System",
							"sid": 554006090076681,
							"parameters": {
								"tag": "\"explore\" & Planet.UID"
							}
						}
					],
					"sid": 939446509489657
				}
			]
		},
		{
			"eventType": "comment",
			"text": "Visualize trade ships moving between nodes."
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "every-x-seconds",
					"objectClass": "System",
					"sid": 468874745394141,
					"parameters": {
						"interval-seconds": "0.01"
					}
				}
			],
			"actions": [],
			"sid": 332931173144923,
			"children": [
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "pick-random-instance",
							"objectClass": "System",
							"sid": 307999249738536,
							"parameters": {
								"object": "Planet"
							}
						}
					],
					"actions": [
						{
							"type": "script",
							"script": "const rnd = ConstructUtils.getRandomNumberInRange;\n\n// Spawn a trade ship and send to a connected planet.\nconst planet = runtime.objects.Planet.getFirstPickedInstance();\nconst connectedPlanets = GameUtils.getConnectedPlanets(runtime, planet.uid);\nif (connectedPlanets.length === 0) return;\nconst ship = runtime.objects.TradeShip.createInstance(\n\t\"Ships\",\n\tplanet.x + rnd(-20, 20),\n\tplanet.y + rnd(-20, 20),\n\tfalse,\n\t\"Standard Trade Ship\"\n);\nconst destPlanet = connectedPlanets[Math.floor(Math.random() * connectedPlanets.length)];\nship.behaviors.MoveTo.moveToPosition(\n\tdestPlanet.x + rnd(-20, 20),\n\tdestPlanet.y + rnd(-20, 20)\n);"
						}
					],
					"sid": 498177183977100
				}
			]
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-arrived",
					"objectClass": "TradeShip",
					"sid": 643361837948472,
					"behaviorType": "MoveTo"
				}
			],
			"actions": [
				{
					"id": "destroy",
					"objectClass": "TradeShip",
					"sid": 916318466240054
				}
			],
			"sid": 244642029274090
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-start-of-layout",
					"objectClass": "System",
					"sid": 780198066232680
				}
			],
			"actions": [
				{
					"id": "fill-ellipse",
					"objectClass": "ScanArea",
					"sid": 434111339166890,
					"parameters": {
						"x": "ScanArea.Width / 2",
						"y": "ScanArea.Height / 2",
						"radius-x": "ScanArea.Width / 2",
						"radius-y": "ScanArea.Height / 2",
						"color": "rgba(100, 100, 100, 100)",
						"edge": "smooth"
					}
				}
			],
			"sid": 105518405109301,
			"children": [
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "for-each",
							"objectClass": "System",
							"sid": 249900634978979,
							"parameters": {
								"object": "Planet"
							}
						}
					],
					"actions": [
						{
							"type": "script",
							"script": "const planet = runtime.objects.Planet.getFirstPickedInstance();\nplanet.instVars.name = GameUtils.generateRandomPlanetName(planet.uid);"
						},
						{
							"id": "set-speed",
							"objectClass": "Planet",
							"sid": 165738147127102,
							"behaviorType": "Rotate",
							"parameters": {
								"speed": "random(5,20) * choose(1, -1)"
							}
						}
					],
					"sid": 940289517788049
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "pick-by-unique-id",
							"objectClass": "Planet",
							"sid": 874306572717105,
							"parameters": {
								"unique-id": "7"
							}
						}
					],
					"actions": [
						{
							"id": "move-to-position",
							"objectClass": "ResearchStation",
							"sid": 862014146000818,
							"behaviorType": "MoveTo",
							"parameters": {
								"x": "Planet.X",
								"y": "Planet.Y + 100",
								"mode": "direct"
							}
						},
						{
							"id": "wait-for-signal",
							"objectClass": "System",
							"sid": 365542317599973,
							"parameters": {
								"tag": "\"loading_complete\""
							}
						},
						{
							"type": "script",
							"script": "const planetUid = runtime.objects.Planet.getFirstPickedInstance().uid;\nGameUtils.buildFacilityOnPlanet(runtime, planetUid, \"Colony\");"
						}
					],
					"sid": 194076452485474
				}
			]
		},
		{
			"eventType": "group",
			"disabled": false,
			"title": "Debug Log",
			"description": "Manage debug log additions and display.",
			"isActiveOnStart": true,
			"children": [
				{
					"functionName": "LogDebugMessage",
					"functionDescription": "Add a message to the debug log to be displayed on the debug layer.",
					"functionCategory": "",
					"functionReturnType": "none",
					"functionCopyPicked": false,
					"functionIsAsync": false,
					"functionParameters": [
						{
							"name": "text",
							"type": "string",
							"initialValue": "",
							"comment": "The debug message to be logged.",
							"sid": 344930069477099
						}
					],
					"eventType": "function-block",
					"conditions": [],
					"actions": [
						{
							"type": "script",
							"script": "const display = runtime.objects.DebugTextDisplay.getFirstInstance();\nconst debugLog = JSON.parse(display.instVars.messages);\ndebugLog.unshift({\n\t\"timestamp\": runtime.wallTime,\n\t\"message\": localVars.text\n});\ndisplay.instVars.messages = JSON.stringify(debugLog);"
						}
					],
					"sid": 353069325148542
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "every-tick",
							"objectClass": "System",
							"sid": 723166127652218
						}
					],
					"actions": [
						{
							"type": "script",
							"script": "const display = runtime.objects.DebugTextDisplay.getFirstInstance();\nconst duration = display.instVars.messageDuration;\nlet messages = JSON.parse(display.instVars.messages);\n// remove outdated messages\nmessages = messages.filter(item => item.timestamp > runtime.wallTime - duration);\ndisplay.instVars.messages = JSON.stringify(messages);\n// update display\ndisplay.text = messages.map(item => `${item.timestamp.toFixed(2)}s: ${item.message}`).join(\"\\n\");"
						}
					],
					"sid": 793769406371850
				}
			],
			"sid": 186907708226155
		}
	],
	"sid": 747474318372044
}